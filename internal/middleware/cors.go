// File: /internal/middleware/cors.go

package middleware

import (
	"net/http"

	"github.com/jeancarlosdanese/go-marketing/internal/logger"
)

// CORSMiddleware adiciona os cabeÃ§alhos CORS corretamente
func CORSMiddleware(next http.Handler) http.Handler {
	log := logger.GetLogger()

	log.Debug("Adicionando middleware CORS")
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		log.Debug("Middleware CORS", "method", r.Method, "path", r.URL.Path)

		// ðŸ”¥ Permitir chamadas do frontend no localhost
		w.Header().Set("Access-Control-Allow-Origin", "http://localhost:3000")

		// ðŸ”¥ Permitir mÃ©todos usados pelo frontend
		w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")

		// ðŸ”¥ Permitir headers necessÃ¡rios
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")

		// ðŸ”¥ Permitir credenciais (se necessÃ¡rio)
		w.Header().Set("Access-Control-Allow-Credentials", "true")

		// âœ… Responder diretamente Ã s requisiÃ§Ãµes OPTIONS (preflight)
		if r.Method == http.MethodOptions {
			log.Debug("CORS: Respondendo OPTIONS com 204 No Content", "path", r.URL.Path)
			w.WriteHeader(http.StatusNoContent)
			return
		}

		// ðŸ”¥ Passa para o prÃ³ximo handler se nÃ£o for OPTIONS
		next.ServeHTTP(w, r)
	})
}
