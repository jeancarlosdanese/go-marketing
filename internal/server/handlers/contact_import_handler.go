// File: /internal/server/handlers/contact_import_handler.go

package handlers

import (
	"context"
	"encoding/json"
	"io"
	"log/slog"
	"net/http"

	"github.com/jeancarlosdanese/go-marketing/internal/db"
	"github.com/jeancarlosdanese/go-marketing/internal/dto"
	"github.com/jeancarlosdanese/go-marketing/internal/logger"
	"github.com/jeancarlosdanese/go-marketing/internal/middleware"
	"github.com/jeancarlosdanese/go-marketing/internal/models"
	"github.com/jeancarlosdanese/go-marketing/internal/service"
	"github.com/jeancarlosdanese/go-marketing/internal/utils"
)

// ImportContactHandler define a interface do handler de importa√ß√£o
type ImportContactHandler interface {
	UploadHandler() http.HandlerFunc
	GetImportsHandler() http.HandlerFunc
	GetImportByIDHandler() http.HandlerFunc
	UpdateImportConfigHandler() http.HandlerFunc
	RemoveImportHandler() http.HandlerFunc
	StartImportHandler() http.HandlerFunc
}

type importContactHandler struct {
	log                  *slog.Logger
	importContactRepo    db.ContactImportRepository
	contactImportService service.ContactImportService
}

// NewImportHandler cria uma inst√¢ncia do ImportHandler
func NewImportContactHandler(importContactRepo db.ContactImportRepository, contactImportService service.ContactImportService) ImportContactHandler {
	return &importContactHandler{
		log:                  logger.GetLogger(),
		importContactRepo:    importContactRepo,
		contactImportService: contactImportService,
	}
}

// UploadHandler processa o upload de um arquivo CSV
func (h *importContactHandler) UploadHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		authAccount := middleware.GetAuthAccountOrFail(r.Context(), w, logger.GetLogger())

		// üîπ Recebe o arquivo
		file, header, err := r.FormFile("file")
		if err != nil {
			h.log.Error("‚ùå Erro ao receber arquivo", slog.String("error", err.Error()))
			utils.SendError(w, http.StatusBadRequest, "Erro ao receber arquivo.")
			return
		}
		defer file.Close()

		// üîπ L√™ todo o conte√∫do do arquivo
		fileBytes, err := io.ReadAll(file)
		if err != nil {
			h.log.Error("‚ùå Erro ao ler conte√∫do do arquivo", slog.String("error", err.Error()))
			utils.SendError(w, http.StatusInternalServerError, "Erro ao ler conte√∫do do arquivo.")
			return
		}

		// üîπ Gera nome √∫nico e salva no disco
		uniqueFilename := utils.GenerateUniqueFilename(header.Filename)
		if err := utils.SaveBytes(fileBytes, uniqueFilename); err != nil {
			h.log.Error("‚ùå Erro ao salvar arquivo", slog.String("error", err.Error()))
			utils.SendError(w, http.StatusInternalServerError, "Erro ao salvar arquivo.")
			return
		}

		// üîπ L√™ as 5 primeiras linhas do conte√∫do para gerar preview
		previewData, err := utils.Read5LinesFromBytes(fileBytes)
		if err != nil || len(previewData) == 0 {
			h.log.Error("‚ùå Erro ao gerar preview do CSV", slog.String("error", err.Error()))
			utils.SendError(w, http.StatusBadRequest, "Erro ao ler o arquivo CSV. Verifique o formato.")
			return
		}

		preview := &models.ContactImportPreview{
			Headers: previewData[0],
			Rows:    previewData[1:],
		}

		// üîπ Cria entrada inicial no banco
		importData := &models.ContactImport{
			AccountID: authAccount.ID,
			FileName:  uniqueFilename,
			Status:    "pendente",
			Preview:   preview,
		}
		importRecord, err := h.importContactRepo.Create(r.Context(), importData)
		if err != nil {
			h.log.Error("‚ùå Erro ao registrar importa√ß√£o no banco", slog.String("error", err.Error()))
			utils.SendError(w, http.StatusInternalServerError, "Erro ao registrar importa√ß√£o.")
			return
		}

		// üîπ Gera configura√ß√£o autom√°tica
		config, err := h.contactImportService.GenerateImportConfig(r.Context(), preview.Headers, preview.Rows)
		if err != nil {
			h.log.Error("‚ùå Erro ao gerar configura√ß√£o com IA", slog.String("error", err.Error()))
			utils.SendError(w, http.StatusInternalServerError, "Erro ao gerar configura√ß√£o.")
			return
		}

		_, err = h.importContactRepo.UpdateConfig(r.Context(), authAccount.ID, importRecord.ID, *config)
		if err != nil {
			h.log.Error("‚ùå Erro ao salvar configura√ß√£o", slog.String("error", err.Error()))
			utils.SendError(w, http.StatusInternalServerError, "Erro ao salvar configura√ß√£o.")
			return
		}

		h.log.Info("‚úÖ Upload processado com sucesso", slog.String("import_id", importRecord.ID.String()))
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(importRecord)
	}
}

// GetImportsHandler retorna todas as importa√ß√µes de contatos
func (h *importContactHandler) GetImportsHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		authAccount := middleware.GetAuthAccountOrFail(r.Context(), w, h.log)

		// Buscar importa√ß√µes para a conta do usu√°rio
		imports, err := h.importContactRepo.GetAllByAccountID(r.Context(), authAccount.ID)
		if err != nil {
			h.log.Error("‚ùå Erro ao buscar importa√ß√µes", slog.String("error", err.Error()))
			utils.SendError(w, http.StatusInternalServerError, "Erro ao buscar importa√ß√µes.")
			return
		}

		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(imports)
	}
}

// GetImportByIDHandler retorna uma importa√ß√£o espec√≠fica
func (h *importContactHandler) GetImportByIDHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// üîç Buscar conta autenticada
		authAccount := middleware.GetAuthAccountOrFail(r.Context(), w, h.log)

		// üîç Buscar ID da campanha
		importID := utils.GetUUIDFromRequestPath(r, w, "id")

		h.log.Debug("üîç Buscando importa√ß√£o", "import_id", importID)

		// Buscar importa√ß√£o pelo ID
		contactImport, err := h.importContactRepo.GetByID(r.Context(), authAccount.ID, importID)
		if err != nil {
			h.log.Error("‚ùå Erro ao buscar importa√ß√£o", slog.String("error", err.Error()))
			utils.SendError(w, http.StatusInternalServerError, "Erro ao buscar importa√ß√£o.")
			return
		}

		if contactImport == nil {
			utils.SendError(w, http.StatusNotFound, "Importa√ß√£o n√£o encontrada.")
			return
		}

		h.log.Debug("üîç Importa√ß√£o encontrada", "import", contactImport)

		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(contactImport)
	}
}

// UpdateImportConfigHandler atualiza a configura√ß√£o de uma importa√ß√£o
func (h *importContactHandler) UpdateImportConfigHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// üîç Buscar conta autenticada
		authAccount := middleware.GetAuthAccountOrFail(r.Context(), w, h.log)

		// üîç Buscar ID da campanha
		importID := utils.GetUUIDFromRequestPath(r, w, "id")

		// Decodifica o JSON do request
		var config models.ContactImportConfig
		if err := json.NewDecoder(r.Body).Decode(&config); err != nil {
			utils.SendError(w, http.StatusBadRequest, "Configura√ß√£o inv√°lida.")
			return
		}

		// Atualiza a configura√ß√£o no banco de dados
		contactImport, err := h.importContactRepo.UpdateConfig(r.Context(), authAccount.ID, importID, config)
		if err != nil {
			utils.SendError(w, http.StatusInternalServerError, "Erro ao atualizar configura√ß√£o.")
			return
		}

		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(contactImport)
	}
}

// StartImportHandler inicia o processamento de uma importa√ß√£o
func (h *importContactHandler) StartImportHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// üîê Recupera a conta autenticada
		authAccount := middleware.GetAuthAccountOrFail(r.Context(), w, h.log)

		// üì• Extrai o ID da importa√ß√£o da URL
		importID := utils.GetUUIDFromRequestPath(r, w, "id")

		// üü° Atualiza o status para "processando"
		err := h.importContactRepo.UpdateStatus(r.Context(), importID, "processando")
		if err != nil {
			h.log.Error("‚ùå Erro ao atualizar status para 'processando'", "error", err)
			utils.SendError(w, http.StatusInternalServerError, "Erro ao iniciar o processamento.")
			return
		}

		// üöÄ Inicia o processamento em background
		go func() {
			ctx := context.Background()

			// üîç Recupera os dados da importa√ß√£o
			importData, err := h.importContactRepo.GetByID(ctx, authAccount.ID, importID)
			if err != nil || importData == nil {
				h.log.Error("‚ùå Erro ao buscar dados da importa√ß√£o", "error", err)
				return
			}

			// üìÇ Abre o arquivo CSV
			file, err := utils.OpenImportContactsFile(importData.FileName)
			if err != nil {
				h.log.Error("‚ùå Erro ao abrir arquivo CSV", "error", err)
				return
			}
			defer file.Close()

			// üîÑ Converte config para DTO
			configDTO := dto.ConvertToConfigImportContactDTO(*importData.Config)

			// üîß Processa os dados do CSV
			success, failed, err := h.contactImportService.ProcessCSVAndSaveDB(ctx, file, authAccount.ID, configDTO)
			if err != nil {
				h.log.Error("‚ùå Erro ao processar CSV", "error", err)
				return
			}

			h.log.Info("‚úÖ Processamento conclu√≠do",
				slog.Int("success", success),
				slog.Int("failed", failed),
				slog.String("import_id", importID.String()),
			)

			// ‚úÖ Atualiza o status para "concluida"
			err = h.importContactRepo.UpdateStatus(context.Background(), importID, "concluida")
			if err != nil {
				h.log.Error("‚ùå Erro ao atualizar status para 'concluida'", slog.String("error", err.Error()))
			}

		}()

		// üîÅ Retorna resposta imediata
		w.WriteHeader(http.StatusOK)
		json.NewEncoder(w).Encode(map[string]string{"status": "processando"})
	}
}

// RemoveImportHandler remove uma importa√ß√£o de contatos
func (h *importContactHandler) RemoveImportHandler() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// üîç Buscar conta autenticada
		authAccount := middleware.GetAuthAccountOrFail(r.Context(), w, h.log)

		// üîç Buscar ID da campanha
		importID := utils.GetUUIDFromRequestPath(r, w, "id")

		// Remover a importa√ß√£o
		err := h.importContactRepo.Remove(r.Context(), authAccount.ID, importID)
		if err != nil {
			utils.SendError(w, http.StatusInternalServerError, "Erro ao remover importa√ß√£o.")
			return
		}

		w.WriteHeader(http.StatusOK)
	}
}
